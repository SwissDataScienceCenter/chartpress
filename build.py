#!/usr/bin/env python3
import os
import subprocess
import argparse
import dateutil.parser
import dateutil.tz
from datetime import datetime
import time
from ruamel.yaml import YAML

JUPYTERHUB_VERSION = '0.8.1'

def last_modified_commit(path, **kwargs):
    return subprocess.check_output([
        'git',
        'log',
        '-n', '1',
        '--pretty=format:%h',
        path
    ], **kwargs).decode('utf-8')

def last_modified_date(path, **kwargs):
    return subprocess.check_output([
        'git',
        'log',
        '-n', '1',
        '--pretty=format:%cd',
        '--date=iso',
        path
    ], **kwargs).decode('utf-8')

def image_touched(image, commit_range):
    return subprocess.check_output([
        'git', 'diff', '--name-only', commit_range, os.path.join('images', image)
    ]).decode('utf-8').strip() != ''

def build_images(prefix, images, commit_range=None, push=False):
    for image in images:
        if commit_range:
            if not image_touched(image, commit_range):
                print("Skipping {}, not touched in {}".format(image, commit_range))
                continue
        image_path = os.path.join('images', image)
        tag = last_modified_commit(image_path)
        image_spec = '{}{}:{}'.format(prefix, image, tag)

        subprocess.check_call([
            'docker', 'build', '-t', image_spec, image_path,
            '--build-arg', 'JUPYTERHUB_VERSION=%s' % JUPYTERHUB_VERSION,
        ])
        if push:
            subprocess.check_call([
                'docker', 'push', image_spec
            ])

def build_values(prefix):
    rt_yaml = YAML()
    rt_yaml.indent(offset=2)

    with open('jupyterhub/values.yaml') as f:
        values = rt_yaml.load(f)

    values['hub']['image']['name'] = prefix + 'hub'
    values['hub']['image']['tag'] = last_modified_commit('images/hub')

    values['singleuser']['image']['name'] = prefix + 'singleuser-sample'
    values['singleuser']['image']['tag'] = last_modified_commit('images/singleuser-sample')

    with open('jupyterhub/values.yaml', 'w') as f:
        rt_yaml.dump(values, f)


def build_chart():
    rt_yaml = YAML()
    rt_yaml.indent(offset=2)

    version = last_modified_commit('.')
    with open('jupyterhub/Chart.yaml') as f:
        chart = rt_yaml.load(f)

    chart['version'] = chart['version'] + '-' + version

    with open('jupyterhub/Chart.yaml', 'w') as f:
        rt_yaml.dump(chart, f)


def fixup_chart_index(repopath):
    """
    Fixup the timestamps in helm charts index.yaml

    Currently the published times of all the charts are reset to current
    time, since they're set from mtime and our git clone does not preserve
    mtimes.

    Go YAML's time parser seems insanely finnicky, so this has a bunch of
    really terrible datetime stuff here.
    """
    # Round Tripping seems to fail with index.yaml!
    safe_yaml = YAML(typ='safe')
    with open(os.path.join(repopath, 'index.yaml')) as f:
        index = safe_yaml.load(f)

    for _, entries in index['entries'].items():
        for e in entries:
            filename = e['urls'][0].split('/')[-1]
            last_modified_str = last_modified_date(filename, cwd=repopath)
            if last_modified_str:
                # If git has a last modified time, use it. We rely on git to give it to us
                # with an appropriate tz and the non dateutil.parser to parse it
                last_modified = dateutil.parser.parse(last_modified_str)
            else:
                # If we don't have this in git yet (so this is the latest chart release)
                # we still have to modify it, because apparently Go's YAML parser can not cope with
                # different yet valid time formats in the same document (?!?!). Just leaving this
                # be causes issues. We get mtime, do some twisting to get it to localtime so
                # isoformat will work
                filepath = os.path.join(repopath, filename)
                last_modified_ts = os.path.getmtime(filepath)
                last_modified = datetime.fromtimestamp(last_modified_ts).replace(tzinfo=dateutil.tz.tzlocal())
            e['created'] = last_modified.isoformat()

    # We have to manually set this again, because Go's YAML parser seems unable to cope with
    # multiple types of date formatting in the same doc, even if it was generated by go in the
    # first place!
    index['generated'] = datetime.utcnow().replace(tzinfo=dateutil.tz.tzutc()).isoformat()
    with open(os.path.join(repopath, 'index.yaml'), 'w') as f:
        safe_yaml.dump(index, f)


def publish_pages():
    version = last_modified_commit('.')
    subprocess.check_call([
        'git', 'clone', '--no-checkout',
        'git@github.com:jupyterhub/helm-chart', 'gh-pages'],
        env=dict(os.environ, GIT_SSH_COMMAND='ssh -i travis')
    )
    subprocess.check_call(['git', 'checkout', 'gh-pages'], cwd='gh-pages')
    subprocess.check_call([
        'helm', 'package', 'jupyterhub',
        '--destination', 'gh-pages/'
    ])
    subprocess.check_call([
        'helm', 'repo', 'index', '.',
        '--url', 'https://jupyterhub.github.io/helm-chart'
    ], cwd='gh-pages')
    fixup_chart_index('gh-pages')
    subprocess.check_call(['git', 'add', '.'], cwd='gh-pages')
    subprocess.check_call([
        'git',
        'commit',
        '-m', '[jupyterhub] Automatic update for commit {}'.format(version)
    ], cwd='gh-pages')
    subprocess.check_call(
        ['git', 'push', 'origin', 'gh-pages'],
        cwd='gh-pages',
        env=dict(os.environ, GIT_SSH_COMMAND='ssh -i ../travis')
    )


def main():
    argparser = argparse.ArgumentParser()
    argparser.add_argument(
        '--image-prefix',
        default='jupyterhub/k8s-'
    )
    subparsers = argparser.add_subparsers(dest='action')

    build_parser = subparsers.add_parser('build', description='Build & Push images')
    build_parser.add_argument('--commit-range', help='Range of commits to consider when building images')
    build_parser.add_argument('--push', action='store_true')
    build_parser.add_argument('--publish-chart', action='store_true')


    args = argparser.parse_args()

    images = ['hub', 'singleuser-sample']
    if args.action == 'build':
        build_images(args.image_prefix, images, args.commit_range, args.push)
        build_values(args.image_prefix)
        build_chart()
        if args.publish_chart:
            publish_pages()

main()
